% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/embed.R
\name{get_grid_data}
\alias{get_grid_data}
\alias{get_grid_data_by_year}
\title{Extract grid values based on coordinates from data frame}
\usage{
get_grid_data(data, files, ..., spat_form = ~longitude + latitude,
  names = NULL)

get_grid_data_by_year(data, queries, year_var = "year", ...,
  spat_form = ~longitude + latitude, names = NULL,
  .progress = interactive())
}
\arguments{
\item{data}{The data set that should be embeded by grid data. The
grid data is specified via \code{file = } argument. See \code{read_grid}
for details.}

\item{files}{Full file paths to grid data.}

\item{...}{Further arguments passed to \code{read_grid}. Note: usually
it is not necessary to provide an \code{extent} or a \code{mask}. In
fact it should not be done for \code{get_grid_data}, as it will slow down
the operation, as \code{\link[raster]{extract}} already only imports
grid data at coordinates specified in \code{data}.}

\item{spat_form}{A \code{formula} object. Specifies the longitude and
latitude column names in \code{data}. These will be used in combination with
\code{link[raster]{extract}} to embed \code{data} with grid data efficiently.}

\item{names}{A character string. If specified, will be used column name
that will store the grid information. Otherwise the default name will
be used.}

\item{queries}{a list of search queries, each a results of \code{search_files}.}

\item{year_var}{The name of column in \code{data} that stores the year of
the observation.}

\item{.progress}{A logical, for whether or not to print a progress bar for
multiprocess, multisession, and multicore plans.}
}
\description{
Given a data set that stores coordinates, extracts grid values from grid
data specified by the \code{files} argument. \code{get_grid_data_by_year}
does the same, but is based on multiple search queries and uses the
grid file closest to the respective year in \code{data}.
}
\examples{
library(mastergrids)
# create fake data
data <- sp::spsample(brazil, 6, "random") \%>\% as.data.frame()
# add grid data
file <- search_files("annual", "5km", "2002", "Class02", "perc",
  path=mastergrid_paths$landcover)
data \%>\% get_grid_data(file, spat_form = ~ x + y)
data \%>\% get_grid_data(file, spat_form =~ x + y, names = "Class00")

# Also works correctly if some coordinates have missing values
data[1,] <- c(NA, -7.25)
data
data \%>\% get_grid_data(file, spat_form = ~x + y, names = "Class00")

# Also works for multiple files
files <- search_files("annual", "5km", "2002", "Class02",
  path=mastergrid_paths$landcover)
data \%>\% get_grid_data(files, spat_form = ~x + y)
data \%>\% get_grid_data(files, spat_form = ~x + y, names = c("Adj", "Perc"))

# Use get_grid_data_by_year to extract grid data based on year variable
queries <- list(
 search_files("acces.*weiss"),
 search_files("lst", "day", "annual", "5km", "mean.*mean"))
data$year <- 2000
data \%>\% get_grid_data_by_year(queries, spat_form = ~x + y,
 names = c("access", "lst_day"))
data$year <- 1997:2002
data \%>\% get_grid_data_by_year(queries, spat_form = ~x + y,
 names = c("access", "lst_day"))
# -> 1997 - 2000 the same lst_day as before (no values before 2000, so 2000
# -> 2001 - 2003 uses the current lst_day values
# -> access always the same, as only one file available

}
